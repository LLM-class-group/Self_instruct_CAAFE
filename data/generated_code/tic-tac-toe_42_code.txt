# Total number of 'x' and 'o' squares
# Usefulness: This feature helps the model learn the overall balance of 'x' and 'o' squares on the board.
# Input samples: 'top-left-square': [1, 0, 0], 'top-middle-square': [0, 1, 0], 'top-right-square': [0, 0, 1]
df['total_pieces'] = (df['top-left-square'] + df['top-middle-square'] + df['top-right-square'] + 
                     df['middle-left-square'] + df['middle-middle-square'] + df['middle-right-square'] + 
                     df['bottom-left-square'] + df['bottom-middle-square'] + df['bottom-right-square'])

# Explanation why 'middle-right-square' is dropped
df.drop(columns=['middle-right-square'], inplace=True)
# Number of 'x' squares in a column
# Usefulness: This feature helps the model learn patterns in 'x' squares, such as winning columns.
# Input samples: 'top-left-square': [1, 1, 0], 'top-middle-square': [0, 1, 0], 'top-right-square': [0, 0, 1]
df['x_squares_in_column'] = (df['top-left-square'] == 1) + (df['middle-left-square'] == 1) + (df['bottom-left-square'] == 1)
# Number of 'o' squares in a column
# Usefulness: This feature helps the model learn patterns in 'o' squares, such as blocking 'x' wins.
# Input samples: 'top-left-square': [0, 0, 0], 'top-middle-square': [0, 0, 1], 'top-right-square': [0, 1, 1]
df['o_squares_in_column'] = (df['top-left-square'] == 0) + (df['middle-left-square'] == 0) + (df['bottom-left-square'] == 0)

# Explanation why 'middle-left-square' is dropped
df.drop(columns=['middle-left-square'], inplace=True)# Number of 'x' squares in a diagonal
# Usefulness: This feature helps the model learn patterns in 'x' squares, such as winning diagonals.
# Input samples: 'top-left-square': [1, 1, 0], 'top-middle-square': [0, 1, 0], 'bottom-right-square': [0, 0, 1]
df['x_squares_in_diagonal'] = (df['top-left-square'] == 1) & (df['middle-middle-square'] == 1) & (df['bottom-right-square'] == 1)

# Explanation why 'top-middle-square' is dropped
df.drop(columns=['top-middle-square'], inplace=True)