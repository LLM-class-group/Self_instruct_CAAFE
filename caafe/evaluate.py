import os
import pickle
from data import get_data_split
from caafe_evaluate import evaluate_dataset
from feature_extension_baselines import (
    extend_using_dfs,
    extend_using_autofeat,
    transform_data_with_code,
)


def transform_dataset(
    df_train, df_test, ds, seed, code_overwrite=None
):
    # Remove target column from df_train
    target_train = df_train[ds[4][-1]]
    target_test = df_test[ds[4][-1]]
    df_train = df_train.drop(columns=[ds[4][-1]])
    df_test = df_test.drop(columns=[ds[4][-1]])

    # Transform training and test datasets using code generated by CAAFE
    df_train, df_test = transform_data_with_code(
        df_train, df_test, ds, seed, code_overwrite=code_overwrite
    )

    # Add target column back to df_train
    df_train[ds[4][-1]] = target_train
    df_test[ds[4][-1]] = target_test

    # disable categorical encoding, because feature engineering might have broken indices
    ds[3] = []
    ds[2] = []

    return ds, df_train, df_test


def load_result(all_results, ds, seed, method):
    """Evaluates a dataframe with and without feature extension."""
    method_str = method if type(method) == str else "transformer"

    data_dir = os.environ.get("DATA_DIR", "data/")
    path = f"{data_dir}/evaluations/result_{ds[0]}_{seed}_{method_str}.txt"
    try:
        f = open(
            path,
            "rb",
        )
        r = pickle.load(f)
        f.close()
        r["failed"] = False

        all_results[f"{ds[0]}_{str(seed)}_{method_str}"] = r

        return r
    except Exception as e:
        try:
            path = f"{data_dir}/evaluations/result_{ds[0]}__{seed}_{method_str}.txt"
            f = open(
                path,
                "rb",
            )
            r = pickle.load(f)
            f.close()

            r["failed"] = True

            all_results[f"{ds[0]}_{str(seed)}_{method_str}"] = r
            print(
                f"Could not load result for {ds[0]}_{str(seed)}_{method_str} {path}. BL loaded"
            )
            return r
        except Exception as e:
            print(
                f"[WARN] Could not load baseline result for {ds[0]}_{str(seed)}_{method_str} {path}"
            )
            return None


def evaluate_dataset_with_or_without_caafe(
    ds, seed, methods, metric_used, using_caafe, max_time=300, overwrite=False
):  
    """Evaluates a dataframe with and without feature extension."""
    ds, df_train, df_test, df_train_old, df_test_old = get_data_split(ds, seed)

    print("SHAPE BEFORE", df_train_old.shape, "AFTER", df_train.shape)

    ds, df_train, df_test = transform_dataset(
        df_train, df_test, ds, seed
    )

    acc_results = []
    roc_auc_results = []

    for method in methods:
        method_str = method if type(method) == str else "transformer"
        # data_dir = os.environ.get("DATA_DIR", "data/")
        # path = (
        #     f"{data_dir}/evaluations/result_{ds[0]}_{seed}_{method_str}.txt"
        # )
        # if os.path.exists(path) and not overwrite:
        #     print(f"Skipping {path}")
        #     continue
        # print(ds[0], method_str, seed)
        if using_caafe:
            r = evaluate_dataset(
                df_train=df_train,
                df_test=df_test,
                name=ds[0],
                method=method,
                metric_used=metric_used,
                max_time=max_time,
                seed=seed,
                target_name=ds[4][-1],
            )
        else:
             r = evaluate_dataset(
                df_train=df_train_old,
                df_test=df_test_old,
                name=ds[0],
                method=method,
                metric_used=metric_used,
                max_time=max_time,
                seed=seed,
                target_name=ds[4][-1],
            )
        acc_results.append(r["acc"])
        roc_auc_results.append(r["roc"])
    return acc_results, roc_auc_results
